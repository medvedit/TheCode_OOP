package org.medwed_sa.Lessen.Lesson_1_IntroductionToOOP.EX003_2;

/*
 * Конструкторы могут вызывать друг друга, что тут и представлено. Пример: Если пользовательский код обращается к
 * конструктору без аргументов, то он вначале вызывает конструктор с одним аргументом, а тот уже в свою очередь
 * вызовет конструктор с двумя аргументами который уже и передаст данные из пользовательского кода переменные x и y.
 * _______
 * Кроме этого у полей класса появился модификатор доступа - private, что исключает возможность подмены данных
 * значения переменных из вне. Но, сейчас в этом случае закроется возможность и для пользовательского кода
 * читать и менять данные... Как быть?
 * Для чтения данных используются set - сеттеры
 * Для изменения данных используются get - геттеры.
 * Соответственно и пользовательском коде появились методы get() и set() -> ПОСМОТРИ ТАМ!!!
 * _______
 * Появился статический класс позволяющий обращаться к себе из
 * пользовательского кода через -> имяКласса.имяМетода(параметрЭкземпляраКласса, параметрЭкземпляраКласса)
 */

/**
 * Это класс для создания экземпляров классов точек координат в двумерном пространстве.
 * Есть возможность обращаться через get и set.
 */
public class Point2D {
    private double x, y;


    //<editor-fold desc="Конструкторы класса">

    /**
     * Конструктор класса присваивающий переданные в него значения к полям создаваемого экземпляра класса.
     * @param valueX координата по оси x
     * @param valueY координата по оси y
     */
    public Point2D(double valueX, double valueY) {
        this.x = valueX;
        this.y = valueY;
    }

    /**
     * Конструктор класса, обращающийся к конструктору с двумя значениями
     * @param value
     */
    public Point2D(double value) {
        this(value,value);
    }

    public Point2D() {
        this(0);
    }

    //</editor-fold>
    //<editor-fold desc="Геттеры и Сеттеры">

    /**
     * Геттер. Вернет значение координаты X.
     * @return x
     */
    public double getX() {
        return x;
    }

    /**
     * Геттер. Вернет значение координаты Y.
     * @return y
     */
    public double getY() {
        return y;
    }

    /**
     * Сеттер. Изменит значение координаты X.
     * @param x
     */
    public void setX(double x) {
        this.x = x;
    }

    /**
     * Сеттер. Изменит значение координаты Y.
     * @param y
     */
    public void setY(double y) {
        this.y = y;
    }
    //</editor-fold>

    /**
     * Статический метод , позволяющий обращаться к себе через класс.
     * @param a Созданный ранее экземпляр класса Point2D a. Значение точки на оси координат. Координата по оси x и y.
     * @param b Созданный ранее экземпляр класса Point2D b. Значение точки на оси координат. Координата по оси x и y.
     * @return Расстояние между точками.
     */
    public static double distance(Point2D a, Point2D b) {
        return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
    }

    /**
     * Распечатает строковое значение координат x и y.
     * @return toString()
     */
    @Override
    public String toString() {
        return "{" +
                "x = " + x +
                ", y = " + y +
                '}';
    }
}
